{"ast":null,"code":"import _objectWithoutProperties from\"/Users/joohoonkim/Documents/CW/auxion/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _regeneratorRuntime from\"/Users/joohoonkim/Documents/CW/auxion/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/joohoonkim/Documents/CW/auxion/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/joohoonkim/Documents/CW/auxion/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/joohoonkim/Documents/CW/auxion/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import axios from'axios';import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import PropertyCard from'./propertyCard.component';import BidCard from'./bidCard.component';import{io}from'socket.io-client';import ArrowDownwardIcon from'@material-ui/icons/ArrowDownward';import'./profile.styles.css';var REACT_APP_SERVER_URL=process.env.REACT_APP_SERVER_URL;var initialState=null;var Profile=function Profile(props){var _user$properties,_user$auctions;var _useState=useState(initialState),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];var name=user&&user.name||'Name missing..';useEffect(function(){var socket=io(process.env.REACT_APP_SERVER_URL,{transports:['websocket']});socket.on('bid',function(payload){var auction=JSON.parse(payload);console.log('USER: ',user);//I need to use callback pattern of updating the state whenver I use a some kind of setstate function inside of another asynchronous function. Sockeit.io functions are asynchronous and react updates state in batches(asynchronous). If user is null, use callback pattern replacing it with a callback using curState => .. syntax.\nsetUser(function(curState){return _objectSpread(_objectSpread({},curState),{},{auctions:curState.auctions.map(function(actn){return actn._id===auction._id?_objectSpread(_objectSpread({},actn),{},{currentHighestBid:auction.currentHighestBid}):actn;})});});//I am mapping through all the auctions in the state looking for the auction that has the same id with the one that I have received through the websocket, and update the value with the one for the newly received auction. Used 'actn' instead of 'auction' to prevent the latter from shadowing original auction in the state\nconsole.log('AUCTION: ',auction);console.log('Socket connection established');});var accessToken=localStorage.getItem('accessToken');console.log('ACCESS TKN',accessToken);var getProfile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(accessToken){var userInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(REACT_APP_SERVER_URL,\"/me\"),{method:'GET',// credentials: 'include',\nmode:'cors',headers:{// 'Content-Type': 'application/json',\nAuthorization:\"Bearer \".concat(accessToken)}}).then(function(res){return res.json();}).catch(function(err){return console.log(err);});case 2:userInfo=_context.sent;console.log('USERINFO at Proifle Component after making get request call:',userInfo);if(userInfo){setUser(userInfo);// const { name } = userInfo;\n// setState((curState) => ({ ...curState, name }));\n}else{console.log('No user info found');}case 5:case\"end\":return _context.stop();}}},_callee);}));return function getProfile(_x){return _ref.apply(this,arguments);};}();getProfile(accessToken);console.log('inside of UseEffect: ');return function(){return socket.disconnect();};},[]);console.log('outside of UseEffect: ');//Need to display my property and auction status information below.\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Good day, \",name]}),/*#__PURE__*/_jsx(\"h2\",{children:\"My Properties \"}),/*#__PURE__*/_jsx(\"div\",{className:\"my-properties\",children:user&&((_user$properties=user.properties)===null||_user$properties===void 0?void 0:_user$properties.map(function(_ref2){var _id=_ref2._id,otherProps=_objectWithoutProperties(_ref2,[\"_id\"]);return/*#__PURE__*/_jsx(PropertyCard,_objectSpread(_objectSpread({},otherProps),{},{id:_id}),_id);}))}),/*#__PURE__*/_jsx(\"h2\",{style:{marginTop:20},children:\"My Bids \"}),/*#__PURE__*/_jsxs(\"h4\",{children:[' ',/*#__PURE__*/_jsx(\"span\",{style:{color:'green'},children:\"Green\"}),\" if your bid price is the highest bid at the moment.\",/*#__PURE__*/_jsx(\"span\",{style:{color:'red'},children:\" Red\"}),\" if there is a higher bid price from another buyer\"]}),/*#__PURE__*/_jsxs(\"h4\",{children:[\"Click on the card to adjust your bid terms\",/*#__PURE__*/_jsx(ArrowDownwardIcon,{className:\"arrow-downward\"})]}),user&&((_user$auctions=user.auctions)===null||_user$auctions===void 0?void 0:_user$auctions.map(function(auction){return/*#__PURE__*/_jsx(BidCard,{auction:auction},auction._id);}))]})//Guard user and also guard auctions as well just like properties? above\n//Why do I need to guard it? What's happening is whenever React tries to update component(remounts parts of component necessary), it might not have the latest version of user in its state.\n//\n;};export default Profile;","map":{"version":3,"sources":["/Users/joohoonkim/Documents/CW/auxion/client/src/components/profile.component.jsx"],"names":["axios","React","useState","useEffect","Link","PropertyCard","BidCard","io","ArrowDownwardIcon","REACT_APP_SERVER_URL","process","env","initialState","Profile","props","user","setUser","name","socket","transports","on","payload","auction","JSON","parse","console","log","curState","auctions","map","actn","_id","currentHighestBid","accessToken","localStorage","getItem","getProfile","fetch","method","mode","headers","Authorization","then","res","json","catch","err","userInfo","disconnect","properties","otherProps","marginTop","color"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropertyCard from './propertyCard.component';\nimport BidCard from './bidCard.component';\nimport { io } from 'socket.io-client';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport './profile.styles.css';\n\nconst { REACT_APP_SERVER_URL } = process.env;\n\nconst initialState = null;\n\nconst Profile = (props) => {\n  const [user, setUser] = useState(initialState);\n\n  const name = (user && user.name) || 'Name missing..';\n\n  useEffect(() => {\n    const socket = io(process.env.REACT_APP_SERVER_URL, {\n      transports: ['websocket'],\n    });\n    socket.on('bid', (payload) => {\n      const auction = JSON.parse(payload);\n      console.log('USER: ', user);\n\n      //I need to use callback pattern of updating the state whenver I use a some kind of setstate function inside of another asynchronous function. Sockeit.io functions are asynchronous and react updates state in batches(asynchronous). If user is null, use callback pattern replacing it with a callback using curState => .. syntax.\n      setUser((curState) => ({\n        ...curState,\n        auctions: curState.auctions.map((actn) =>\n          actn._id === auction._id\n            ? { ...actn, currentHighestBid: auction.currentHighestBid }\n            : actn\n        ),\n      }));\n      //I am mapping through all the auctions in the state looking for the auction that has the same id with the one that I have received through the websocket, and update the value with the one for the newly received auction. Used 'actn' instead of 'auction' to prevent the latter from shadowing original auction in the state\n      console.log('AUCTION: ', auction);\n      console.log('Socket connection established');\n    });\n\n    const accessToken = localStorage.getItem('accessToken');\n    console.log('ACCESS TKN', accessToken);\n    const getProfile = async (accessToken) => {\n      const userInfo = await fetch(`${REACT_APP_SERVER_URL}/me`, {\n        method: 'GET',\n        // credentials: 'include',\n        mode: 'cors',\n        headers: {\n          // 'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then((res) => res.json())\n        .catch((err) => console.log(err));\n\n      console.log(\n        'USERINFO at Proifle Component after making get request call:',\n        userInfo\n      );\n\n      if (userInfo) {\n        setUser(userInfo);\n        // const { name } = userInfo;\n        // setState((curState) => ({ ...curState, name }));\n      } else {\n        console.log('No user info found');\n      }\n    };\n    getProfile(accessToken);\n    console.log('inside of UseEffect: ');\n    return () => socket.disconnect();\n  }, []);\n  console.log('outside of UseEffect: ');\n  //Need to display my property and auction status information below.\n  return (\n    <div>\n      <h2>Good day, {name}</h2>\n      <h2>My Properties </h2>\n      <div className=\"my-properties\">\n        {user &&\n          user.properties?.map(({ _id, ...otherProps }) => (\n            <PropertyCard key={_id} {...otherProps} id={_id} />\n          ))}\n      </div>\n      <h2 style={{ marginTop: 20 }}>My Bids </h2>\n\n      <h4>\n        {' '}\n        <span style={{ color: 'green' }}>Green</span> if your bid price is the\n        highest bid at the moment.\n        <span style={{ color: 'red' }}> Red</span> if there is a higher bid\n        price from another buyer\n      </h4>\n\n      <h4>\n        Click on the card to adjust your bid terms\n        <ArrowDownwardIcon className=\"arrow-downward\" />\n      </h4>\n      {user &&\n        user.auctions?.map((auction) => (\n          <BidCard key={auction._id} auction={auction} />\n        ))}\n    </div>\n    //Guard user and also guard auctions as well just like properties? above\n    //Why do I need to guard it? What's happening is whenever React tries to update component(remounts parts of component necessary), it might not have the latest version of user in its state.\n    //\n  );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}